// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	"KubeIT-gRPC/model/go"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupAdminServiceClient is the client API for GroupAdminService API.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupAdminServiceClient interface {
	CreateGroup(ctx context.Context, in *_go.Empty, opts ...grpc.CallOption) (*_go.Group, error)
	DeleteGroup(ctx context.Context, in *_go.GroupRequest, opts ...grpc.CallOption) (*_go.StatusReport, error)
}

type groupAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupAdminServiceClient(cc grpc.ClientConnInterface) GroupAdminServiceClient {
	return &groupAdminServiceClient{cc}
}

func (c *groupAdminServiceClient) CreateGroup(ctx context.Context, in *_go.Empty, opts ...grpc.CallOption) (*_go.Group, error) {
	out := new(_go.Group)
	err := c.cc.Invoke(ctx, "/v1alpha2.group.GroupAdminService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupAdminServiceClient) DeleteGroup(ctx context.Context, in *_go.GroupRequest, opts ...grpc.CallOption) (*_go.StatusReport, error) {
	out := new(_go.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.group.GroupAdminService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupAdminServiceServer is the server API for GroupAdminService API.
// All implementations must embed UnimplementedGroupAdminServiceServer
// for forward compatibility
type GroupAdminServiceServer interface {
	CreateGroup(context.Context, *_go.Empty) (*_go.Group, error)
	DeleteGroup(context.Context, *_go.GroupRequest) (*_go.StatusReport, error)
	mustEmbedUnimplementedGroupAdminServiceServer()
}

// UnimplementedGroupAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupAdminServiceServer struct {
}

func (UnimplementedGroupAdminServiceServer) CreateGroup(context.Context, *_go.Empty) (*_go.Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupAdminServiceServer) DeleteGroup(context.Context, *_go.GroupRequest) (*_go.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedGroupAdminServiceServer) mustEmbedUnimplementedGroupAdminServiceServer() {}

// UnsafeGroupAdminServiceServer may be embedded to opt out of forward compatibility for this API.
// Use of this interface is not recommended, as added methods to GroupAdminServiceServer will
// result in compilation errors.
type UnsafeGroupAdminServiceServer interface {
	mustEmbedUnimplementedGroupAdminServiceServer()
}

func RegisterGroupAdminServiceServer(s grpc.ServiceRegistrar, srv GroupAdminServiceServer) {
	s.RegisterService(&GroupAdminService_ServiceDesc, srv)
}

func _GroupAdminService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAdminServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.group.GroupAdminService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAdminServiceServer).CreateGroup(ctx, req.(*_go.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupAdminService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(_go.GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupAdminServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.group.GroupAdminService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupAdminServiceServer).DeleteGroup(ctx, req.(*_go.GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupAdminService_ServiceDesc is the grpc.ServiceDesc for GroupAdminService API.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha2.group.GroupAdminService",
	HandlerType: (*GroupAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _GroupAdminService_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _GroupAdminService_DeleteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/group.proto",
}
