// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "kubeIT/pkg/grpc/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchemaManagementServiceClient is the client API for SchemaManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaManagementServiceClient interface {
	CreateSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*common.StatusReport, error)
	GetSchema(ctx context.Context, in *common.IDRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
	DeleteSchema(ctx context.Context, in *common.IDRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
}

type schemaManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaManagementServiceClient(cc grpc.ClientConnInterface) SchemaManagementServiceClient {
	return &schemaManagementServiceClient{cc}
}

func (c *schemaManagementServiceClient) CreateSchema(ctx context.Context, in *Schema, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.schema.SchemaManagementService/CreateSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManagementServiceClient) GetSchema(ctx context.Context, in *common.IDRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.schema.SchemaManagementService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManagementServiceClient) DeleteSchema(ctx context.Context, in *common.IDRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.schema.SchemaManagementService/DeleteSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaManagementServiceServer is the server API for SchemaManagementService service.
// All implementations must embed UnimplementedSchemaManagementServiceServer
// for forward compatibility
type SchemaManagementServiceServer interface {
	CreateSchema(context.Context, *Schema) (*common.StatusReport, error)
	GetSchema(context.Context, *common.IDRequest) (*common.StatusReport, error)
	DeleteSchema(context.Context, *common.IDRequest) (*common.StatusReport, error)
	mustEmbedUnimplementedSchemaManagementServiceServer()
}

// UnimplementedSchemaManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaManagementServiceServer struct {
}

func (UnimplementedSchemaManagementServiceServer) CreateSchema(context.Context, *Schema) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchema not implemented")
}
func (UnimplementedSchemaManagementServiceServer) GetSchema(context.Context, *common.IDRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedSchemaManagementServiceServer) DeleteSchema(context.Context, *common.IDRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchema not implemented")
}
func (UnimplementedSchemaManagementServiceServer) mustEmbedUnimplementedSchemaManagementServiceServer() {
}

// UnsafeSchemaManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaManagementServiceServer will
// result in compilation errors.
type UnsafeSchemaManagementServiceServer interface {
	mustEmbedUnimplementedSchemaManagementServiceServer()
}

func RegisterSchemaManagementServiceServer(s grpc.ServiceRegistrar, srv SchemaManagementServiceServer) {
	s.RegisterService(&SchemaManagementService_ServiceDesc, srv)
}

func _SchemaManagementService_CreateSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManagementServiceServer).CreateSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.schema.SchemaManagementService/CreateSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManagementServiceServer).CreateSchema(ctx, req.(*Schema))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManagementService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManagementServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.schema.SchemaManagementService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManagementServiceServer).GetSchema(ctx, req.(*common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManagementService_DeleteSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManagementServiceServer).DeleteSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.schema.SchemaManagementService/DeleteSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManagementServiceServer).DeleteSchema(ctx, req.(*common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaManagementService_ServiceDesc is the grpc.ServiceDesc for SchemaManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha2.schema.SchemaManagementService",
	HandlerType: (*SchemaManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSchema",
			Handler:    _SchemaManagementService_CreateSchema_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _SchemaManagementService_GetSchema_Handler,
		},
		{
			MethodName: "DeleteSchema",
			Handler:    _SchemaManagementService_DeleteSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/schema/schema.proto",
}
