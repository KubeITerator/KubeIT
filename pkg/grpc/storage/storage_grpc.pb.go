// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "kubeIT/pkg/grpc/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageManagementServiceClient is the client API for StorageManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageManagementServiceClient interface {
	InitUpload(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IDmessage, error)
	GetUploadUrl(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*UrlResponse, error)
	FinishUpload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*common.StatusReport, error)
	DeleteUpload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*common.StatusReport, error)
	GetDownload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*UrlResponse, error)
}

type storageManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageManagementServiceClient(cc grpc.ClientConnInterface) StorageManagementServiceClient {
	return &storageManagementServiceClient{cc}
}

func (c *storageManagementServiceClient) InitUpload(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*IDmessage, error) {
	out := new(IDmessage)
	err := c.cc.Invoke(ctx, "/v1alpha2.storage.StorageManagementService/InitUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) GetUploadUrl(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/v1alpha2.storage.StorageManagementService/GetUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) FinishUpload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.storage.StorageManagementService/FinishUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) DeleteUpload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.storage.StorageManagementService/DeleteUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) GetDownload(ctx context.Context, in *IDmessage, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, "/v1alpha2.storage.StorageManagementService/GetDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageManagementServiceServer is the server API for StorageManagementService service.
// All implementations must embed UnimplementedStorageManagementServiceServer
// for forward compatibility
type StorageManagementServiceServer interface {
	InitUpload(context.Context, *InitRequest) (*IDmessage, error)
	GetUploadUrl(context.Context, *IDmessage) (*UrlResponse, error)
	FinishUpload(context.Context, *IDmessage) (*common.StatusReport, error)
	DeleteUpload(context.Context, *IDmessage) (*common.StatusReport, error)
	GetDownload(context.Context, *IDmessage) (*UrlResponse, error)
	mustEmbedUnimplementedStorageManagementServiceServer()
}

// UnimplementedStorageManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageManagementServiceServer struct {
}

func (UnimplementedStorageManagementServiceServer) InitUpload(context.Context, *InitRequest) (*IDmessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitUpload not implemented")
}
func (UnimplementedStorageManagementServiceServer) GetUploadUrl(context.Context, *IDmessage) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadUrl not implemented")
}
func (UnimplementedStorageManagementServiceServer) FinishUpload(context.Context, *IDmessage) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUpload not implemented")
}
func (UnimplementedStorageManagementServiceServer) DeleteUpload(context.Context, *IDmessage) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUpload not implemented")
}
func (UnimplementedStorageManagementServiceServer) GetDownload(context.Context, *IDmessage) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownload not implemented")
}
func (UnimplementedStorageManagementServiceServer) mustEmbedUnimplementedStorageManagementServiceServer() {
}

// UnsafeStorageManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageManagementServiceServer will
// result in compilation errors.
type UnsafeStorageManagementServiceServer interface {
	mustEmbedUnimplementedStorageManagementServiceServer()
}

func RegisterStorageManagementServiceServer(s grpc.ServiceRegistrar, srv StorageManagementServiceServer) {
	s.RegisterService(&StorageManagementService_ServiceDesc, srv)
}

func _StorageManagementService_InitUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).InitUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.storage.StorageManagementService/InitUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).InitUpload(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_GetUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).GetUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.storage.StorageManagementService/GetUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).GetUploadUrl(ctx, req.(*IDmessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_FinishUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).FinishUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.storage.StorageManagementService/FinishUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).FinishUpload(ctx, req.(*IDmessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_DeleteUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).DeleteUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.storage.StorageManagementService/DeleteUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).DeleteUpload(ctx, req.(*IDmessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_GetDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDmessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).GetDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.storage.StorageManagementService/GetDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).GetDownload(ctx, req.(*IDmessage))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageManagementService_ServiceDesc is the grpc.ServiceDesc for StorageManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha2.storage.StorageManagementService",
	HandlerType: (*StorageManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitUpload",
			Handler:    _StorageManagementService_InitUpload_Handler,
		},
		{
			MethodName: "GetUploadUrl",
			Handler:    _StorageManagementService_GetUploadUrl_Handler,
		},
		{
			MethodName: "FinishUpload",
			Handler:    _StorageManagementService_FinishUpload_Handler,
		},
		{
			MethodName: "DeleteUpload",
			Handler:    _StorageManagementService_DeleteUpload_Handler,
		},
		{
			MethodName: "GetDownload",
			Handler:    _StorageManagementService_GetDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/storage/storage.proto",
}
