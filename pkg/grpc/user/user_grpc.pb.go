// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "kubeIT/pkg/grpc/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientTokenServiceClient is the client API for ClientTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientTokenServiceClient interface {
	CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error)
	GetToken(ctx context.Context, in *UserTokenIDRequest, opts ...grpc.CallOption) (*TokenStatus, error)
	GetTokenStatusList(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TokenStatusList, error)
	DeleteToken(ctx context.Context, in *UserTokenIDRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
}

type clientTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientTokenServiceClient(cc grpc.ClientConnInterface) ClientTokenServiceClient {
	return &clientTokenServiceClient{cc}
}

func (c *clientTokenServiceClient) CreateToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.ClientTokenService/CreateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTokenServiceClient) GetToken(ctx context.Context, in *UserTokenIDRequest, opts ...grpc.CallOption) (*TokenStatus, error) {
	out := new(TokenStatus)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.ClientTokenService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTokenServiceClient) GetTokenStatusList(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*TokenStatusList, error) {
	out := new(TokenStatusList)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.ClientTokenService/GetTokenStatusList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientTokenServiceClient) DeleteToken(ctx context.Context, in *UserTokenIDRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.ClientTokenService/DeleteToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientTokenServiceServer is the server API for ClientTokenService service.
// All implementations must embed UnimplementedClientTokenServiceServer
// for forward compatibility
type ClientTokenServiceServer interface {
	CreateToken(context.Context, *TokenRequest) (*Token, error)
	GetToken(context.Context, *UserTokenIDRequest) (*TokenStatus, error)
	GetTokenStatusList(context.Context, *UserIDRequest) (*TokenStatusList, error)
	DeleteToken(context.Context, *UserTokenIDRequest) (*common.StatusReport, error)
	mustEmbedUnimplementedClientTokenServiceServer()
}

// UnimplementedClientTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientTokenServiceServer struct {
}

func (UnimplementedClientTokenServiceServer) CreateToken(context.Context, *TokenRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedClientTokenServiceServer) GetToken(context.Context, *UserTokenIDRequest) (*TokenStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedClientTokenServiceServer) GetTokenStatusList(context.Context, *UserIDRequest) (*TokenStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenStatusList not implemented")
}
func (UnimplementedClientTokenServiceServer) DeleteToken(context.Context, *UserTokenIDRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteToken not implemented")
}
func (UnimplementedClientTokenServiceServer) mustEmbedUnimplementedClientTokenServiceServer() {}

// UnsafeClientTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientTokenServiceServer will
// result in compilation errors.
type UnsafeClientTokenServiceServer interface {
	mustEmbedUnimplementedClientTokenServiceServer()
}

func RegisterClientTokenServiceServer(s grpc.ServiceRegistrar, srv ClientTokenServiceServer) {
	s.RegisterService(&ClientTokenService_ServiceDesc, srv)
}

func _ClientTokenService_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTokenServiceServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.ClientTokenService/CreateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTokenServiceServer).CreateToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTokenService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTokenServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.ClientTokenService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTokenServiceServer).GetToken(ctx, req.(*UserTokenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTokenService_GetTokenStatusList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTokenServiceServer).GetTokenStatusList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.ClientTokenService/GetTokenStatusList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTokenServiceServer).GetTokenStatusList(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientTokenService_DeleteToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserTokenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientTokenServiceServer).DeleteToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.ClientTokenService/DeleteToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientTokenServiceServer).DeleteToken(ctx, req.(*UserTokenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientTokenService_ServiceDesc is the grpc.ServiceDesc for ClientTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha2.user.ClientTokenService",
	HandlerType: (*ClientTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateToken",
			Handler:    _ClientTokenService_CreateToken_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _ClientTokenService_GetToken_Handler,
		},
		{
			MethodName: "GetTokenStatusList",
			Handler:    _ClientTokenService_GetTokenStatusList_Handler,
		},
		{
			MethodName: "DeleteToken",
			Handler:    _ClientTokenService_DeleteToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/user/user.proto",
}

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	AddUserToGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
	GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*User, error)
	GetUserInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*User, error)
	GetUserPermissions(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserPermissionResponse, error)
	ChangeUserPermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
	RemoveUserFromGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*common.StatusReport, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) AddUserToGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/AddUserToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUser(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserInfo(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) GetUserPermissions(ctx context.Context, in *UserIDRequest, opts ...grpc.CallOption) (*UserPermissionResponse, error) {
	out := new(UserPermissionResponse)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/GetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) ChangeUserPermission(ctx context.Context, in *ChangePermissionRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/ChangeUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) RemoveUserFromGroup(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*common.StatusReport, error) {
	out := new(common.StatusReport)
	err := c.cc.Invoke(ctx, "/v1alpha2.user.UserManager/RemoveUserFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	AddUserToGroup(context.Context, *UserGroupRequest) (*common.StatusReport, error)
	GetUser(context.Context, *UserIDRequest) (*User, error)
	GetUserInfo(context.Context, *common.Empty) (*User, error)
	GetUserPermissions(context.Context, *UserIDRequest) (*UserPermissionResponse, error)
	ChangeUserPermission(context.Context, *ChangePermissionRequest) (*common.StatusReport, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*common.StatusReport, error)
	RemoveUserFromGroup(context.Context, *UserGroupRequest) (*common.StatusReport, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) AddUserToGroup(context.Context, *UserGroupRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToGroup not implemented")
}
func (UnimplementedUserManagerServer) GetUser(context.Context, *UserIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserManagerServer) GetUserInfo(context.Context, *common.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserManagerServer) GetUserPermissions(context.Context, *UserIDRequest) (*UserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedUserManagerServer) ChangeUserPermission(context.Context, *ChangePermissionRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserPermission not implemented")
}
func (UnimplementedUserManagerServer) DeleteUser(context.Context, *DeleteUserRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserManagerServer) RemoveUserFromGroup(context.Context, *UserGroupRequest) (*common.StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromGroup not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_AddUserToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).AddUserToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/AddUserToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).AddUserToGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUser(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserInfo(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/GetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).GetUserPermissions(ctx, req.(*UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_ChangeUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).ChangeUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/ChangeUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).ChangeUserPermission(ctx, req.(*ChangePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_RemoveUserFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).RemoveUserFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha2.user.UserManager/RemoveUserFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).RemoveUserFromGroup(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha2.user.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserToGroup",
			Handler:    _UserManager_AddUserToGroup_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserManager_GetUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserManager_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _UserManager_GetUserPermissions_Handler,
		},
		{
			MethodName: "ChangeUserPermission",
			Handler:    _UserManager_ChangeUserPermission_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserManager_DeleteUser_Handler,
		},
		{
			MethodName: "RemoveUserFromGroup",
			Handler:    _UserManager_RemoveUserFromGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/user/user.proto",
}
