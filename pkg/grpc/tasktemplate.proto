syntax = "proto3";

package kubeit.v1beta1;
option go_package = "github.com/KubeITerator/KubeIT/pkg/grpc/api";

import "dependencies/google/api/annotations.proto";
import "grpc/common.proto";
import "dependencies/tagger/tagger.proto";


service TaskManagementService {
  rpc CreateTask (Task) returns (kubeit.v1beta1.StatusReport){
    option (google.api.http) = {
      post: "/v1/task"
      body: "*"
    };
  };

  rpc GetTask (kubeit.v1beta1.IDRequest) returns (kubeit.v1beta1.StatusReport){
    option (google.api.http) = {
      get: "/v1/task/{id}"
    };
  };

  rpc DeleteGroup (kubeit.v1beta1.IDRequest) returns (kubeit.v1beta1.StatusReport) {
    option (google.api.http) = {
      delete: "/v1/task/{id}"
    };
  };
}



message InputParams {
  string name = 1;
  string default = 2;
}

message InputArtifacts {
  string name = 1;
  string type = 2;
  string path = 3;
  string url_header = 4;
}

message Inputs {
  repeated InputParams params = 1;
  repeated InputArtifacts artifacts = 2;
}

message OutputParams {
  string name = 1;
  string path = 2;
  string default = 3;
}

message OutputArtifact {
  string name = 1;
  string path = 2;
  string type = 3;
}

message Outputs {
  repeated OutputParams params = 1;
  repeated OutputArtifact artifacts = 2;
}

message Requirement {
  string memory = 1;
  string cpu = 2;
}

message Resources {
  Requirement limits = 1;
  Requirement requests = 2;
}

message VolumeMounts {
  string name = 1;
  string mountPath = 2;
}

message Env {
  string envType = 1;
  string key = 2;
  string name = 3;
  string nameFrom = 4;
}

message Container {
  string name = 1;
  string image = 2;
  bool resubmit_pending = 3;
  Resources resources = 4;
  uint32 runAsUser = 5;
  string command = 6;
  repeated string args = 7;
  repeated Env env = 8;
}

message Task {
  string id = 1;
  string name = 2;
  string description = 3;
  Inputs inputs = 4;
  Outputs outputs = 5;
  repeated VolumeMounts volume_mounts = 6;
  Container container = 7;
  Container init_container = 8;
  string yaml = 9;
}