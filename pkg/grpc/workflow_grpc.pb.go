// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowManagementServiceClient is the client API for WorkflowManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowManagementServiceClient interface {
	CreateWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*StatusReport, error)
	GetWorkflow(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*StatusReport, error)
	DeleteWorkflow(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*StatusReport, error)
	GetStatus(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*WorkflowStatus, error)
}

type workflowManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowManagementServiceClient(cc grpc.ClientConnInterface) WorkflowManagementServiceClient {
	return &workflowManagementServiceClient{cc}
}

func (c *workflowManagementServiceClient) CreateWorkflow(ctx context.Context, in *Workflow, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/kubeit.v1beta1.WorkflowManagementService/CreateWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagementServiceClient) GetWorkflow(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/kubeit.v1beta1.WorkflowManagementService/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagementServiceClient) DeleteWorkflow(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/kubeit.v1beta1.WorkflowManagementService/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowManagementServiceClient) GetStatus(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*WorkflowStatus, error) {
	out := new(WorkflowStatus)
	err := c.cc.Invoke(ctx, "/kubeit.v1beta1.WorkflowManagementService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowManagementServiceServer is the server API for WorkflowManagementService service.
// All implementations should embed UnimplementedWorkflowManagementServiceServer
// for forward compatibility
type WorkflowManagementServiceServer interface {
	CreateWorkflow(context.Context, *Workflow) (*StatusReport, error)
	GetWorkflow(context.Context, *IDRequest) (*StatusReport, error)
	DeleteWorkflow(context.Context, *IDRequest) (*StatusReport, error)
	GetStatus(context.Context, *IDRequest) (*WorkflowStatus, error)
}

// UnimplementedWorkflowManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkflowManagementServiceServer struct {
}

func (UnimplementedWorkflowManagementServiceServer) CreateWorkflow(context.Context, *Workflow) (*StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedWorkflowManagementServiceServer) GetWorkflow(context.Context, *IDRequest) (*StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedWorkflowManagementServiceServer) DeleteWorkflow(context.Context, *IDRequest) (*StatusReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedWorkflowManagementServiceServer) GetStatus(context.Context, *IDRequest) (*WorkflowStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}

// UnsafeWorkflowManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowManagementServiceServer will
// result in compilation errors.
type UnsafeWorkflowManagementServiceServer interface {
	mustEmbedUnimplementedWorkflowManagementServiceServer()
}

func RegisterWorkflowManagementServiceServer(s grpc.ServiceRegistrar, srv WorkflowManagementServiceServer) {
	s.RegisterService(&WorkflowManagementService_ServiceDesc, srv)
}

func _WorkflowManagementService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagementServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeit.v1beta1.WorkflowManagementService/CreateWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagementServiceServer).CreateWorkflow(ctx, req.(*Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManagementService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagementServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeit.v1beta1.WorkflowManagementService/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagementServiceServer).GetWorkflow(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManagementService_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagementServiceServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeit.v1beta1.WorkflowManagementService/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagementServiceServer).DeleteWorkflow(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowManagementService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowManagementServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kubeit.v1beta1.WorkflowManagementService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowManagementServiceServer).GetStatus(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowManagementService_ServiceDesc is the grpc.ServiceDesc for WorkflowManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeit.v1beta1.WorkflowManagementService",
	HandlerType: (*WorkflowManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _WorkflowManagementService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _WorkflowManagementService_GetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _WorkflowManagementService_DeleteWorkflow_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _WorkflowManagementService_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/workflow.proto",
}
